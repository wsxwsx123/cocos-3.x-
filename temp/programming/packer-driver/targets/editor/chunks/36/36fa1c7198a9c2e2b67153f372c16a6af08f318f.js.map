{"version":3,"sources":["file:///Users/bane/cocos-3.x-qrcode2/assets/scripts/QRPolynomial.ts"],"names":["QRPolynomial","QRMath","constructor","num","shift","length","Error","offset","Array","i","get","index","getLength","multiply","e","j","gexp","glog","mod","ratio"],"mappings":"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","sourcesContent":["import { QRMath } from './QRMath'\n\nexport default class QRPolynomial {\n  num: any\n  constructor (num: any, shift: any) {\n    if (num.length == null) {\n      throw new Error(num.length + '/' + shift)\n    }\n    let offset = 0\n    while (offset < num.length && num[offset] === 0) {\n      offset++\n    }\n    this.num = new Array(num.length - offset + shift)\n    for (let i = 0; i < num.length - offset; i++) {\n      this.num[i] = num[i + offset]\n    }\n  }\n\n  get (index: any) {\n    return this.num[index]\n  }\n\n  getLength () {\n    return this.num.length\n  }\n\n  multiply (e: any) {\n    const num = new Array(this.getLength() + e.getLength() - 1)\n    for (let i = 0; i < this.getLength(); i++) {\n      for (let j = 0; j < e.getLength(); j++) {\n        num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i)) + QRMath.glog(e.get(j)))\n      }\n    }\n    return new QRPolynomial(num, 0)\n  }\n\n  mod (e: any): any {\n    if (this.getLength() - e.getLength() < 0) {\n      return this\n    }\n    const ratio = QRMath.glog(this.get(0)) - QRMath.glog(e.get(0))\n    const num = new Array(this.getLength())\n    for (let i = 0; i < this.getLength(); i++) {\n      num[i] = this.get(i)\n    }\n    for (let i = 0; i < e.getLength(); i++) {\n      num[i] ^= QRMath.gexp(QRMath.glog(e.get(i)) + ratio)\n    }\n    // recursive call\n    return new QRPolynomial(num, 0).mod(e)\n  }\n}\n"]}